

SRSC file (see riot_database_format.txt) with the following record types:

[0x0000] Level name and DB refs
    struct db_ref { uint16 index; uint16 ???; string path; } // path is relative to *.lvl file
    string      level_name;
    uint32      max_width;
    uint32      max_height;
    uint32      db_ref_count;
    db_ref[~]   db_refs;
    
    
[0x0001] Layers
    struct color4b { uint8 red; uint8 green; uint8 blue; uint8 dummy = 0; }
    struct layer_def
    {
        uint32      width; // in vertices; a layer with widthand height of 1 is a square with 1 vertex in each corner
        uint32      height;
        uint32      type;  // 0 = floor, 1 = ceiling, 2 = between
        uint32      origin_x; // position of layer's top left corner in the level, where 0/0 is the top left corner of the level
        uint32      origin_y; 
        float       world_height;
        string      layer_name;
        uint32      flags; // 2 = member of alternate blending group
        float       light_direction;
        float       light_ascension;
        color4b     light_color;
        color4b     ambient_color;
        uint32      light_dropoff_type; // 0 = none; 1 = from north to south; 2 = E->W; 3 = S->N; 4 = W->E
        uint32      dummyLength;
        uint32      ???;  // probably related to layer stacking
        uint32[4*~1] ???;
    }
    struct layer_data_block
    {
        uint32          compressed_size;
        uint8[~]        layer_data; // zlib-compressed
    }
    uint32                  layer_count;
    uint32                  ???;
    layer_def[~1]           layer_definitions;
    layer_data_block[~2]    data_blocks:
    
    
[0x0002] Layer groups and visibility
    struct layer_group
    {
        string      group_name;
        uint32      layer_count;
        uint32[~]   layers; // ??? don't know how this is stored
    }
    uint32          group_count;
    layer_group[~]  groups;
    
    
[0x0020] Objects (does not appear if level has no objects)
    struct object
    {
        uint32          ???; // running number?
        uint16          class_id;
        uint16          class_db_index;
        uint32          ???;
        float           x_position;
        float           y_position; // elevation axis, always relative to model origin
        float           z_position;
        uint32          flags; // ?, seems to control whether some fields appear or not. is 0x100 normally and 0x101 if scale fields appear
        uint32          ???;
        uint16          x_rotation; // in degrees
        uint16          y_rotation; //    "
        uint16          z_rotation; //    "
        float           x_scaling;  // these only appear if bit 0x100 in flag field is set
        float           y_scaling;  //   "
        float           z_scaling;  //   "
        uint32          data_area_size; // in dwords (4 byte blocks)
        uint32          parameter_count;  // how many parameters in this object are changed compared to the class
        uint32[~1]      parameter_data;
        uint16[~1]      ???; // don't know what this is, only that it contains one uint16 for every field
        field_def[~2]   parameter_definitions; // this has the same format as the one of classes
    }
    uint16      object_count;
    object[~]   objects;
    
    
    
    
    
Layer data block format
-----------------------

    Zlib-compressed

    First block is vertex data
    4 bytes per vertex. Top left vertex appears first, then filled left to right, top to bottom
    
        first byte is type. type 0 is normal. values 0-75 are defined. working on list later
        
        second byte is always 0x01. no idea what it does yet.
        
        third and fourth byte seems to be height offset divided by two (can't change height in smaller units)
        value is biased, so 0x8000 means an offset of 0, 0x7FFF means -2 and 0x8002 means +4 etc.
        
        
    Second block is face data
    26 bytes per face, top left face first, then filled left to right, top to bottom
    
        first 2 bytes are division:
               +-+      +-+
            0= |/|   1= |\|
               +-+      +-+
               
        followed by two 4-byte-words which are database references for the face textures. 
        first is for left triangle, second is right triangle.
        
        followed by that, 16 bytes that indicate texture orientation, but in what way i can not tell yet
    
    
    
    